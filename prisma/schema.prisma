// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model NewListing {
    id                  String @id @default(cuid())
    clientNames         String?
    propertyAddress     String?
    listingAppointment  DateTime?
    seller1             String?
    seller1Phone        Int?
    seller1email        String?
    seller2             String?
    seller2Phone        Int?
    seller2email        String?
    salePrice           Int?
    hasMinutes          Boolean?
    isList              Boolean?
    isInterview         Boolean?
    why                 String? @db.LongText
    where               String? @db.LongText
    how                 String? @db.LongText
    problem             String? @db.LongText
    happenNext          String? @db.LongText
    maxPrice            String? @db.LongText
    minPrice            String? @db.LongText
    owes                Int?
    description         String? @db.LongText
    rate                Int?
    whatTen             String? @db.LongText
    questions           String? @db.LongText
    impediments         String? @db.LongText
    willTake            Boolean?
    keysAvailable       Boolean?
    houseType           HouseType? @default(HOA)
    CDDPrice            Int?
    HOAPRice            Int?
    listingAgent        ListingAgent?
}

enum HouseType {
    HOA @map("HOA/Condo")
    CDD 	
}

model ListingAgent {
    id                String @id @default(cuid())
    question1         String? @db.LongText
    question2         String? @db.LongText
    question3         String? @db.LongText
    question4         String? @db.LongText
    question5         String? @db.LongText
    question6         String? @db.LongText
    question7         String? @db.LongText
    question8         String? @db.LongText
    question9         String? @db.LongText
    question10        String? @db.LongText
    question11        String? @db.LongText
    question12        String? @db.LongText
    notes             String? @db.LongText
    newListing        NewListing @relation(fields: [id], references: [id], onDelete: Cascade)
    newListingId      Int @unique
}